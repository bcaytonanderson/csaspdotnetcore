ASP.NET Core

Unit 1:
-------
This lesson will create a .NET MVC Application which manages a pen-and-paper style tabletop game.
	-Will allow users to add new characters
	-Will show all characters.

	-Setting up the index view:
		-Create the index view as a .cshtml file which allows us to write our HTML views and add in C# code. This uses a built-in engine called Razor.

		-To populate the list of characters dynamically, we start out by using the Razor keyword @model with a datatype String. 
			-lowercase @model defines the data coming into the view
			-uppercase @Model access the model data.

	-Set up controller to send data to the view.
		-The index method (public IActionResult Index() ) returns an IActionResult.
			-Methods which return this are called "action methods". Action methods PROVIDE RESPONSES USABLE BY BROWSERS.

	ROUTES
		-What happens if we omit the route in our URL? It will default a controller and action- normally it will default to www.url.com/Home/Index.

	MODELS
		-Since our app will do more than just list characters names, we need to build out the Character class in the Models folder.

		-within the Character class, we define
			public string Name;

			-whenever there is a public field, variable, or property we use Pascal Case: every word in the name will be capitalized.

		-.NET uses a number of namespaces to help with the division of concerns. Currently, the Models, Views, and Controllers directories are within their own namespaces.

		-Within the view, we need to explicitly state the namespace of our Model
			@model String => @model CharacterSheetApp.Models.Character

			-We also need to edit our <li> to access the name field from our character object:
			@Model => @Model.name

		